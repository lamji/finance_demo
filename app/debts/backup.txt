import { ThemedText } from "@/components/ThemedText";
import { ThemedView } from "@/components/ThemedView";
import { IconSymbol } from "@/components/ui/IconSymbol";
import { formatPHPCurrency } from "@/helper";
import useHeaderTheme from "@/hooks/useHeaderTheme";
import { usePay } from "@/services/mutation/usePay";
import { Debt, useGetUser } from "@/services/query/usegetUser";
import { setEditingDebt } from "@/store/features/debtSlice";
import { Stack, useLocalSearchParams, useRouter } from "expo-router";
import React, { useState } from "react";
import {
  ScrollView,
  StatusBar,
  StyleSheet,
  TouchableOpacity,
  View,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { useDispatch } from "react-redux";

export default function DebtDetailsScreen() {
  const { id } = useLocalSearchParams();
  const { data: user, isLoading: fetchLoading, error } = useGetUser();
  const { headerBgColors, theme, tintColor, safeAreaBackground } =
    useHeaderTheme();
  const debt = user?.data?.debtsList?.find((debt) => debt._id === id) as
    | Debt
    | undefined;
  const [activeTab, setActiveTab] = useState<"history" | "schedule">("history");
  const [processingPaymentIndex, setProcessingPaymentIndex] = useState<
    number | null
  >(null);
  const { mutate: makePayment } = usePay();
  const dispatch = useDispatch();
  const router = useRouter();

  const handleEdit = () => {
    console.log("Edit button clicked", { debt, id });
    if (!debt) {
      console.log("No debt found");
      return;
    }
    dispatch(setEditingDebt({ id: debt._id, type: "for_update" }));
    console.log("Attempting to navigate to add screen");
    router.replace("../add");
  };

  if (fetchLoading) {
    return (
      <>
        <StatusBar
          backgroundColor={safeAreaBackground}
          barStyle={theme === "dark" ? "light-content" : "dark-content"}
        />
        <SafeAreaView
          style={[styles.container, { backgroundColor: safeAreaBackground }]}
        >
          <ThemedText>Loading...</ThemedText>
        </SafeAreaView>
      </>
    );
  }

  if (error) {
    return (
      <>
        <StatusBar
          backgroundColor={safeAreaBackground}
          barStyle={theme === "dark" ? "light-content" : "dark-content"}
        />
        <SafeAreaView
          style={[styles.container, { backgroundColor: safeAreaBackground }]}
        >
          <ThemedText>Error loading debt details</ThemedText>
        </SafeAreaView>
      </>
    );
  }

  if (!debt) {
    return (
      <>
        <StatusBar
          backgroundColor={safeAreaBackground}
          barStyle={theme === "dark" ? "light-content" : "dark-content"}
        />
        <SafeAreaView
          style={[styles.container, { backgroundColor: safeAreaBackground }]}
        >
          <ThemedText>Debt not found</ThemedText>
        </SafeAreaView>
      </>
    );
  }

  const calculatePercentage = () => {
    const total = Number(debt.totalDebt);
    const paid = Number(debt.total_paid) || 0;
    return Math.min(Math.round((paid / total) * 100), 100);
  };
  return (
    <SafeAreaView
      style={[styles.container, { backgroundColor: safeAreaBackground }]}
    >
      <StatusBar
        backgroundColor={safeAreaBackground}
        barStyle={theme === "dark" ? "light-content" : "dark-content"}
      />
      <Stack.Screen
        options={{
          headerShown: true,
          title: "",
          headerBackTitle: "Back",
          headerTransparent: true,
          headerTintColor: "#fff",
          headerStyle: {
            backgroundColor: "transparent",
          },
        }}
      />
      <ScrollView style={styles.scrollView} bounces={false}>
        {/* Main Card */}
        <View
          style={[styles.mainCard, { backgroundColor: headerBgColors[theme] }]}
        >
          <View style={styles.bankInfo}>
            <View style={styles.bankNameSection}>
              <View style={styles.iconContainer}>
                <IconSymbol name="creditcard.fill" size={24} color="#fff" />
              </View>
              <ThemedText style={styles.bankName}>{debt.bank}</ThemedText>
            </View>{" "}
            <TouchableOpacity
              onPress={handleEdit}
              activeOpacity={0.7}
              style={{
                padding: 10,
                backgroundColor: "rgba(255,255,255,0.2)",
                borderRadius: 8,
                minWidth: 44,
                minHeight: 44,
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <IconSymbol name="square.and.pencil" size={24} color="#fff" />
            </TouchableOpacity>
          </View>
          <View style={styles.amountContainer}>
            <ThemedText style={styles.amountLabel}>Total Debt</ThemedText>
            <ThemedText style={styles.amount}>
              {formatPHPCurrency(debt.totalDebt)}
            </ThemedText>
          </View>
          {/* Progress Bar */}
          <View style={styles.progressSection}>
            <View style={styles.progressBar}>
              <View
                style={[
                  styles.progressFill,
                  { width: `${calculatePercentage()}%` },
                ]}
              />
            </View>
            <View style={styles.progressInfo}>
              <ThemedText style={styles.progressText}>
                {calculatePercentage()}% Completed
              </ThemedText>
              <ThemedText style={styles.remainingText}>
                {formatPHPCurrency(debt.remaining_balance)} remaining
              </ThemedText>
            </View>
          </View>
          {/* Quick Stats */}
          <View style={styles.statsGrid}>
            <View style={styles.statsItem}>
              <ThemedText style={styles.statsLabel}>Monthly Due</ThemedText>
              <ThemedText style={styles.statsValue}>
                {formatPHPCurrency(debt.monthly_due)}
              </ThemedText>
            </View>
            <View style={styles.statsItem}>
              <ThemedText style={styles.statsLabel}>Total Paid</ThemedText>
              <ThemedText style={styles.statsValue}>
                {formatPHPCurrency(debt.total_paid)}
              </ThemedText>
            </View>
          </View>
        </View>
        {/* Tab Navigation */}
        <View
          style={[
            styles.tabContainer,
            {
              backgroundColor: "#fff",
              padding: 16,
              borderTopLeftRadius: 16,
              borderTopRightRadius: 16,
            },
          ]}
        >
          <TouchableOpacity
            style={[
              styles.tab,
              { backgroundColor: "#fff" },
              activeTab === "history" && [
                styles.activeTab,
                { backgroundColor: headerBgColors[theme] },
              ],
            ]}
            onPress={() => {
              // Only allow tab switch if no payment is processing
              if (processingPaymentIndex === null) {
                setActiveTab("history");
              }
            }}
            disabled={processingPaymentIndex !== null}
          >
            <ThemedText
              style={[
                styles.tabText,
                activeTab === "history" && { color: "#fff" },
                processingPaymentIndex !== null && { opacity: 0.5 },
              ]}
            >
              Payment History
            </ThemedText>
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              styles.tab,
              { backgroundColor: "#fff" },
              activeTab === "schedule" && [
                styles.activeTab,
                { backgroundColor: headerBgColors[theme] },
              ],
            ]}
            onPress={() => {
              // Only allow tab switch if no payment is processing
              if (processingPaymentIndex === null) {
                setActiveTab("schedule");
              }
            }}
            disabled={processingPaymentIndex !== null}
          >
            <ThemedText
              style={[
                styles.tabText,
                activeTab === "schedule" && { color: "#fff" },
              ]}
            >
              Payment Schedule
            </ThemedText>
          </TouchableOpacity>
        </View>
        {/* Tab Content */}
        <ThemedView
          style={[
            styles.contentCard,
            {
              backgroundColor: "#fff",
              padding: 30,
              marginHorizontal: -16,
              marginTop: -16,
              height: "100%",
            },
          ]}
        >
          {activeTab === "history" ? (
            debt.monthly_payments?.length ? (
              debt.monthly_payments
                .filter((payment) => payment.status === "paid")
                .map((payment, index) => (
                  <View key={index} style={styles.paymentRow}>
                    <View style={styles.paymentInfo}>
                      <ThemedText style={styles.paymentAmount}>
                        {formatPHPCurrency(payment.amount)}
                      </ThemedText>
                      <ThemedText style={styles.paymentDate}>
                        {payment.due_date &&
                          new Date(payment.due_date).toLocaleDateString()}
                      </ThemedText>
                    </View>
                    <View
                      style={[
                        styles.statusBadge,
                        { backgroundColor: safeAreaBackground },
                      ]}
                    >
                      <IconSymbol
                        name="checkmark.circle.fill"
                        size={20}
                        color={"white"}
                      />
                      <ThemedText
                        style={[styles.statusText, { color: "white" }]}
                      >
                        Paid
                      </ThemedText>
                    </View>
                  </View>
                ))
            ) : (
              <ThemedText style={styles.emptyText}>
                No payment history available
              </ThemedText>
            )
          ) : debt.monthly_payments?.length ? (
            debt.monthly_payments
              .filter((payment) => payment.status !== "paid")
              .map((payment, index) => {
                const isOverdue =
                  payment.due_date && new Date(payment.due_date) < new Date();
                return (
                  <View key={index} style={styles.paymentRow}>
                    <View style={styles.paymentInfo}>
                      <ThemedText style={styles.paymentAmount}>
                        {formatPHPCurrency(payment.amount)}
                      </ThemedText>
                      <ThemedText style={styles.paymentDate}>
                        Due:
                        {payment.due_date &&
                          new Date(payment.due_date).toLocaleDateString()}
                      </ThemedText>
                    </View>
                    <View
                      style={{
                        flexDirection: "row",
                        gap: 8,
                        alignItems: "center",
                      }}
                    >
                      <View
                        style={[
                          styles.statusBadge,
                          isOverdue ? styles.overdueBadge : styles.pendingBadge,
                          { backgroundColor: "white" },
                        ]}
                      >
                        <IconSymbol
                          name={
                            isOverdue
                              ? "exclamationmark.circle.fill"
                              : "clock.fill"
                          }
                          size={20}
                          color={isOverdue ? "#DC2626" : "#FFA000"}
                        />
                        <ThemedText
                          style={[
                            styles.statusText,
                            isOverdue ? styles.overdueText : styles.pendingText,
                          ]}
                        >
                          {isOverdue ? "Overdue" : "Pending"}
                        </ThemedText>
                      </View>
                      <TouchableOpacity
                        style={[styles.payButton]}
                        onPress={() => {
                          setProcessingPaymentIndex(index);
                          makePayment(
                            {
                              debtId: debt._id,
                              paymentIndex: index,
                            },
                            {
                              onSuccess: () => {
                                setProcessingPaymentIndex(null);
                              },
                              onError: () => {
                                setProcessingPaymentIndex(null);
                              },
                            },
                          );
                        }}
                      >
                        <IconSymbol
                          name="creditcard.fill"
                          size={16}
                          color={tintColor}
                        />
                        <ThemedText
                          style={[styles.payButtonText, { color: tintColor }]}
                        >
                          {processingPaymentIndex === index
                            ? "Processing"
                            : "Pay"}
                        </ThemedText>
                      </TouchableOpacity>
                    </View>
                  </View>
                );
              })
          ) : (
            <ThemedText style={styles.emptyText}>
              No scheduled payments
            </ThemedText>
          )}
        </ThemedView>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  mainCard: {
    padding: 24,
    borderBottomLeftRadius: 32,
    borderBottomRightRadius: 32,
    marginBottom: 16,
    paddingTop: 80,
  },
  bankInfo: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 24,
  },
  bankNameSection: {
    flexDirection: "row",
    alignItems: "center",
    gap: 12,
  },
  iconContainer: {
    width: 48,
    height: 48,
    borderRadius: 24,
    backgroundColor: "rgba(255,255,255,0.2)",
    justifyContent: "center",
    alignItems: "center",
  },
  bankName: {
    fontSize: 24,
    fontWeight: "600",
    color: "#fff",
  },
  amountContainer: {
    marginBottom: 24,
  },
  amountLabel: {
    fontSize: 14,
    color: "rgba(255,255,255,0.8)",
    marginBottom: 4,
  },
  amount: {
    fontSize: 30,
    lineHeight: 36,
    fontWeight: "700",
    color: "#fff",
  },
  progressSection: {
    marginBottom: 24,
  },
  progressBar: {
    height: 8,
    backgroundColor: "rgba(255,255,255,0.2)",
    borderRadius: 4,
    overflow: "hidden",
    marginBottom: 8,
  },
  progressFill: {
    height: "100%",
    backgroundColor: "#fff",
    borderRadius: 4,
  },
  progressInfo: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  progressText: {
    color: "#fff",
    fontSize: 14,
    fontWeight: "600",
  },
  remainingText: {
    color: "rgba(255,255,255,0.8)",
    fontSize: 14,
  },
  statsGrid: {
    flexDirection: "row",
    gap: 16,
  },
  statsItem: {
    flex: 1,
    backgroundColor: "rgba(255,255,255,0.1)",
    padding: 16,
    borderRadius: 16,
  },
  statsLabel: {
    color: "rgba(255,255,255,0.8)",
    fontSize: 12,
    marginBottom: 4,
  },
  statsValue: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "600",
  },
  tabContainer: {
    flexDirection: "row",
    paddingHorizontal: 16,
    marginBottom: 16,
    gap: 12,
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    alignItems: "center",
  },
  activeTab: {
    backgroundColor: "#2196F3",
  },
  tabText: {
    fontSize: 14,
    fontWeight: "600",
    color: "#666",
  },
  activeTabText: {
    color: "#fff",
  },
  contentCard: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 16,
  },
  paymentRow: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "rgba(0,0,0,0.05)",
  },
  paymentInfo: {
    flex: 1,
  },
  paymentAmount: {
    fontSize: 16,
    fontWeight: "600",
  },
  paymentDate: {
    fontSize: 12,
    color: "#666",
    marginTop: 4,
  },
  statusBadge: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#E3F2FD",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
    gap: 4,
  },
  pendingBadge: {
    backgroundColor: "#FFF3E0",
  },
  overdueBadge: {
    backgroundColor: "#FEE2E2",
  },
  statusText: {
    fontSize: 12,
    fontWeight: "500",
    color: "#2196F3",
  },
  pendingText: {
    color: "#FFA000",
  },
  overdueText: {
    color: "#DC2626",
  },
  emptyText: {
    textAlign: "center",
    color: "#666",
    padding: 24,
  },
  payButton: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 20,
    gap: 4,
  },
  payButtonText: {
    fontSize: 12,
    fontWeight: "500",
    color: "#fff",
  },
});
